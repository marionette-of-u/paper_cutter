<token_desc>{
    symbol_any_char<char>,
    symbol_any_meta_char<char>,
    symbol_number<char>,
    symbol_space<char>,
    symbol_equal<char>,
    symbol_exclamation<char>;
}

<grammar> parser{
    line<std::string>
        : [make_line] whitecpace reg_name(0) whitecpace exclamation_opt(1) symbol_equal whitecpace reg_sequence(2)
        | [] whitecpace
        ;

    exclamation_opt<std::string>
        : [make_dispose_rule] symbol_exclamation
        | []
        ;

    whitecpace<std::string>
        : [] symbol_space
        | [] whitecpace symbol_space
        | []
        ;

    reg_name<std::string>
        : [make_reg_name] symbol_any_char(0)
        | [make_reg_name] reg_name(0) symbol_any_char(1)
        | [make_reg_name] reg_name(0) symbol_number(1)
        ;

    reg_sequence<std::string>
        : [make_reg_sequence] reg_char_non_space(0)
        | [make_reg_sequence] reg_sequence(0) reg_char(1)
        ;

    reg_char_non_space<std::string>
        : [make_reg_char] symbol_any_char(0)
        | [make_reg_char] symbol_any_meta_char(0)
        | [make_reg_char] symbol_number(0)
        | [make_reg_char] symbol_exclamation(0)
        ;

    reg_char<std::string>
        : [make_reg_char] symbol_any_char(0)
        | [make_reg_char] symbol_any_meta_char(0)
        | [make_reg_char] symbol_number(0)
        | [make_reg_char] symbol_space(0)
        | [make_reg_char] symbol_equal(0)
        | [make_reg_char] symbol_exclamation(0)
        ;
}

